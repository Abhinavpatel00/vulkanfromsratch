
#define VK_NO_PROTOTYPES
#include "../external/volk/volk.h"
#include <stdbool.h> // for bool
#include <stddef.h>  // for size_t
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#define u8 uint8_t
#define u16 uint16_t
#define u32 uint32_t
#define u64 uint64_t

#define i8 int8_t
#define i16 int16_t
#define i32 int32_t
#define i64 int64_t

#define f32 float
#define f64 double

#ifndef ARRAYSIZE
#define ARRAYSIZE(array) (sizeof(array) / sizeof((array)[0]))
#endif
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define CLAMP(x, low, high) (MAX((low), MIN((x), (high))))
#define SWAP(a, b) \
	do \
	{ \
		__typeof__(a) tmp = a; \
		a = b; \
		b = tmp; \
	} while (0)

// üêû Debugging Helper
#ifdef DEBUG
#include <stdio.h>
#define DBG(fmt, ...) \
	fprintf(stderr, "[%s:%d] " fmt "\n", __FILE__, __LINE__, ##__VA_ARGS__)
#else
#define DBG(fmt, ...)
#endif

#if COMPILER_MSVC
#define AlignOf(T) __alignof(T)
#elif COMPILER_CLANG
#define AlignOf(T) __alignof(T)
#elif COMPILER_GCC
#define AlignOf(T) __alignof__(T)
#else
// errror not defined
#endif

#define MEMBER_OFFSET(Type, Member) (offsetof(Type, Member))
#define POINTER_FROM_MEMBER_OFFSET(MemberType, BasePtr, Offset) \
	((MemberType*)((unsigned char*)(BasePtr) + (Offset)))

#define DUMMY_MEMBER_PTR(Type, Member) (((Type*)0)->Member)

#define CONTAINER_FROM_MEMBER(MemberPtr, ContainerType, Member) \
	((ContainerType*)((unsigned char*)(MemberPtr) - MEMBER_OFFSET(ContainerType, Member)))

#define EachElement(it, array) (U64 it = 0; it < ARRAYSIZE(array); it += 1)
#define EachElementReverse(it, array) (U64 it = ARRAYSIZE(array) - 1; it < ARRAYSIZE(array) && it != (U64) - 1; it -= 1)
#define EachElementWithValue(it, array) \
	for (U64 it = 0; it < ARRAYSIZE(array); it += 1) \
		if (true) \
		{ \
			auto& value = array[it]; \
			(void)value; \
		}

#define WITH_SETUP_AND_CLEANUP_BLOCK(setup_code, cleanup_code) \
	for (int _defer_loop_flag = ((setup_code), 0); !_defer_loop_flag; _defer_loop_flag += 1, (cleanup_code))

#define WITH_OPTIONAL_SETUP_AND_CLEANUP_BLOCK(setup_result, cleanup_code) \
	for (int _defer_flag = 2 * !(setup_result); (_defer_flag == 2 ? ((cleanup_code), 0) : !_defer_flag); _defer_flag += 1, (cleanup_code))

#define FOR_EACH_INDEX(index_var, count) \
	for (size_t index_var = 0; index_var < (count); ++index_var)

#define FOR_EACH_ELEMENT_INDEX_IN_ARRAY(index_var, array) \
	for (size_t index_var = 0; index_var < (sizeof(array) / sizeof((array)[0])); ++index_var)
#define FOR_EACH_ENUM_VALUE(enum_type, enum_var) \
	for (enum_type enum_var = (enum_type)0; enum_var < enum_type##_COUNT; enum_var = (enum_type)(enum_var + 1))
#define FOR_EACH_NONZERO_ENUM_VALUE(enum_type, enum_var) \
	for (enum_type enum_var = (enum_type)1; enum_var < enum_type##_COUNT; enum_var = (enum_type)(enum_var + 1))

static inline const char* vk_result_to_string(VkResult result)
{
	switch (result)
	{
	case VK_SUCCESS:
		return "VK_SUCCESS";
	case VK_NOT_READY:
		return "VK_NOT_READY";
	case VK_TIMEOUT:
		return "VK_TIMEOUT";
	case VK_EVENT_SET:
		return "VK_EVENT_SET";
	case VK_EVENT_RESET:
		return "VK_EVENT_RESET";
	case VK_INCOMPLETE:
		return "VK_INCOMPLETE";
	case VK_ERROR_OUT_OF_HOST_MEMORY:
		return "VK_ERROR_OUT_OF_HOST_MEMORY";
	case VK_ERROR_OUT_OF_DEVICE_MEMORY:
		return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
	case VK_ERROR_INITIALIZATION_FAILED:
		return "VK_ERROR_INITIALIZATION_FAILED";
	case VK_ERROR_DEVICE_LOST:
		return "VK_ERROR_DEVICE_LOST";
	case VK_ERROR_MEMORY_MAP_FAILED:
		return "VK_ERROR_MEMORY_MAP_FAILED";
	case VK_ERROR_LAYER_NOT_PRESENT:
		return "VK_ERROR_LAYER_NOT_PRESENT";
	case VK_ERROR_EXTENSION_NOT_PRESENT:
		return "VK_ERROR_EXTENSION_NOT_PRESENT";
	case VK_ERROR_FEATURE_NOT_PRESENT:
		return "VK_ERROR_FEATURE_NOT_PRESENT";
	case VK_ERROR_INCOMPATIBLE_DRIVER:
		return "VK_ERROR_INCOMPATIBLE_DRIVER";
	case VK_ERROR_TOO_MANY_OBJECTS:
		return "VK_ERROR_TOO_MANY_OBJECTS";
	case VK_ERROR_FORMAT_NOT_SUPPORTED:
		return "VK_ERROR_FORMAT_NOT_SUPPORTED";
	case VK_ERROR_FRAGMENTED_POOL:
		return "VK_ERROR_FRAGMENTED_POOL";
	case VK_ERROR_UNKNOWN:
		return "VK_ERROR_UNKNOWN";
	case VK_ERROR_OUT_OF_POOL_MEMORY:
		return "VK_ERROR_OUT_OF_POOL_MEMORY";
	case VK_ERROR_INVALID_EXTERNAL_HANDLE:
		return "VK_ERROR_INVALID_EXTERNAL_HANDLE";
	case VK_ERROR_FRAGMENTATION:
		return "VK_ERROR_FRAGMENTATION";
	case VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS:
		return "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS";
	case VK_PIPELINE_COMPILE_REQUIRED:
		return "VK_PIPELINE_COMPILE_REQUIRED";
	case VK_ERROR_NOT_PERMITTED:
		return "VK_ERROR_NOT_PERMITTED";
	case VK_ERROR_SURFACE_LOST_KHR:
		return "VK_ERROR_SURFACE_LOST_KHR";
	case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:
		return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
	case VK_SUBOPTIMAL_KHR:
		return "VK_SUBOPTIMAL_KHR";
	case VK_ERROR_OUT_OF_DATE_KHR:
		return "VK_ERROR_OUT_OF_DATE_KHR";
	case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:
		return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
	case VK_ERROR_VALIDATION_FAILED_EXT:
		return "VK_ERROR_VALIDATION_FAILED_EXT";
	case VK_ERROR_INVALID_SHADER_NV:
		return "VK_ERROR_INVALID_SHADER_NV";
	case VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT:
		return "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT";
	case VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT:
		return "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT";
	case VK_THREAD_IDLE_KHR:
		return "VK_THREAD_IDLE_KHR";
	case VK_THREAD_DONE_KHR:
		return "VK_THREAD_DONE_KHR";
	case VK_OPERATION_DEFERRED_KHR:
		return "VK_OPERATION_DEFERRED_KHR";
	case VK_OPERATION_NOT_DEFERRED_KHR:
		return "VK_OPERATION_NOT_DEFERRED_KHR";
	case VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR:
		return "VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR";
	case VK_ERROR_COMPRESSION_EXHAUSTED_EXT:
		return "VK_ERROR_COMPRESSION_EXHAUSTED_EXT";
	case VK_INCOMPATIBLE_SHADER_BINARY_EXT:
		return "VK_INCOMPATIBLE_SHADER_BINARY_EXT";
	case VK_PIPELINE_BINARY_MISSING_KHR:
		return "VK_PIPELINE_BINARY_MISSING_KHR";
	case VK_ERROR_NOT_ENOUGH_SPACE_KHR:
		return "VK_ERROR_NOT_ENOUGH_SPACE_KHR";
	default:
		return "VK_UNKNOWN_ERROR";
	}
}

#define VK_CHECK(call) \
	do \
	{ \
		VkResult result_ = call; \
		if (result_ != VK_SUCCESS) \
		{ \
			fprintf(stderr, "Vulkan call failed in %s:%d:\n  ‚Üí %s (%d)\n", \
			    __FILE__, __LINE__, vk_result_to_string(result_), result_); \
			assert(result_ == VK_SUCCESS); \
		} \
	} while (0)

static inline const char* vkFormatToString(VkFormat format)
{

	switch (format)
	{
	case VK_FORMAT_UNDEFINED:
		return "VK_FORMAT_UNDEFINED";
	case VK_FORMAT_R4G4_UNORM_PACK8:
		return "VK_FORMAT_R4G4_UNORM_PACK8";
	case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
		return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
	case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
		return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
	case VK_FORMAT_R5G6B5_UNORM_PACK16:
		return "VK_FORMAT_R5G6B5_UNORM_PACK16";
	case VK_FORMAT_B5G6R5_UNORM_PACK16:
		return "VK_FORMAT_B5G6R5_UNORM_PACK16";
	case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
		return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
	case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
		return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
	case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
		return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
	case VK_FORMAT_R8_UNORM:
		return "VK_FORMAT_R8_UNORM";
	case VK_FORMAT_R8_SNORM:
		return "VK_FORMAT_R8_SNORM";
	case VK_FORMAT_R8_USCALED:
		return "VK_FORMAT_R8_USCALED";
	case VK_FORMAT_R8_SSCALED:
		return "VK_FORMAT_R8_SSCALED";
	case VK_FORMAT_R8_UINT:
		return "VK_FORMAT_R8_UINT";
	case VK_FORMAT_R8_SINT:
		return "VK_FORMAT_R8_SINT";
	case VK_FORMAT_R8_SRGB:
		return "VK_FORMAT_R8_SRGB";
	case VK_FORMAT_R8G8_UNORM:
		return "VK_FORMAT_R8G8_UNORM";
	case VK_FORMAT_R8G8_SNORM:
		return "VK_FORMAT_R8G8_SNORM";
	case VK_FORMAT_R8G8_USCALED:
		return "VK_FORMAT_R8G8_USCALED";
	case VK_FORMAT_R8G8_SSCALED:
		return "VK_FORMAT_R8G8_SSCALED";
	case VK_FORMAT_R8G8_UINT:
		return "VK_FORMAT_R8G8_UINT";
	case VK_FORMAT_R8G8_SINT:
		return "VK_FORMAT_R8G8_SINT";
	case VK_FORMAT_R8G8_SRGB:
		return "VK_FORMAT_R8G8_SRGB";
	case VK_FORMAT_R8G8B8_UNORM:
		return "VK_FORMAT_R8G8B8_UNORM";
	case VK_FORMAT_R8G8B8_SNORM:
		return "VK_FORMAT_R8G8B8_SNORM";
	case VK_FORMAT_R8G8B8_USCALED:
		return "VK_FORMAT_R8G8B8_USCALED";
	case VK_FORMAT_R8G8B8_SSCALED:
		return "VK_FORMAT_R8G8B8_SSCALED";
	case VK_FORMAT_R8G8B8_UINT:
		return "VK_FORMAT_R8G8B8_UINT";
	case VK_FORMAT_R8G8B8_SINT:
		return "VK_FORMAT_R8G8B8_SINT";
	case VK_FORMAT_R8G8B8_SRGB:
		return "VK_FORMAT_R8G8B8_SRGB";
	case VK_FORMAT_B8G8R8_UNORM:
		return "VK_FORMAT_B8G8R8_UNORM";
	case VK_FORMAT_B8G8R8_SNORM:
		return "VK_FORMAT_B8G8R8_SNORM";
	case VK_FORMAT_B8G8R8_USCALED:
		return "VK_FORMAT_B8G8R8_USCALED";
	case VK_FORMAT_B8G8R8_SSCALED:
		return "VK_FORMAT_B8G8R8_SSCALED";
	case VK_FORMAT_B8G8R8_UINT:
		return "VK_FORMAT_B8G8R8_UINT";
	case VK_FORMAT_B8G8R8_SINT:
		return "VK_FORMAT_B8G8R8_SINT";
	case VK_FORMAT_B8G8R8_SRGB:
		return "VK_FORMAT_B8G8R8_SRGB";
	case VK_FORMAT_R8G8B8A8_UNORM:
		return "VK_FORMAT_R8G8B8A8_UNORM";
	case VK_FORMAT_R8G8B8A8_SNORM:
		return "VK_FORMAT_R8G8B8A8_SNORM";
	case VK_FORMAT_R8G8B8A8_USCALED:
		return "VK_FORMAT_R8G8B8A8_USCALED";
	case VK_FORMAT_R8G8B8A8_SSCALED:
		return "VK_FORMAT_R8G8B8A8_SSCALED";
	case VK_FORMAT_R8G8B8A8_UINT:
		return "VK_FORMAT_R8G8B8A8_UINT";
	case VK_FORMAT_R8G8B8A8_SINT:
		return "VK_FORMAT_R8G8B8A8_SINT";
	case VK_FORMAT_R8G8B8A8_SRGB:
		return "VK_FORMAT_R8G8B8A8_SRGB";
	case VK_FORMAT_B8G8R8A8_UNORM:
		return "VK_FORMAT_B8G8R8A8_UNORM";
	case VK_FORMAT_B8G8R8A8_SNORM:
		return "VK_FORMAT_B8G8R8A8_SNORM";
	case VK_FORMAT_B8G8R8A8_USCALED:
		return "VK_FORMAT_B8G8R8A8_USCALED";
	case VK_FORMAT_B8G8R8A8_SSCALED:
		return "VK_FORMAT_B8G8R8A8_SSCALED";
	case VK_FORMAT_B8G8R8A8_UINT:
		return "VK_FORMAT_B8G8R8A8_UINT";
	case VK_FORMAT_B8G8R8A8_SINT:
		return "VK_FORMAT_B8G8R8A8_SINT";
	case VK_FORMAT_B8G8R8A8_SRGB:
		return "VK_FORMAT_B8G8R8A8_SRGB";
	case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
		return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
	case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
		return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
	case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
		return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
	case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
		return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
	case VK_FORMAT_A8B8G8R8_UINT_PACK32:
		return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
	case VK_FORMAT_A8B8G8R8_SINT_PACK32:
		return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
	case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
		return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
	case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
		return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
	case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
		return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
	case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
		return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
	case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
		return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
	case VK_FORMAT_A2R10G10B10_UINT_PACK32:
		return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
	case VK_FORMAT_A2R10G10B10_SINT_PACK32:
		return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
	case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
		return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
	case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
		return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
	case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
		return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
	case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
		return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
	case VK_FORMAT_A2B10G10R10_UINT_PACK32:
		return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
	case VK_FORMAT_A2B10G10R10_SINT_PACK32:
		return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
	case VK_FORMAT_R16_UNORM:
		return "VK_FORMAT_R16_UNORM";
	case VK_FORMAT_R16_SNORM:
		return "VK_FORMAT_R16_SNORM";
	case VK_FORMAT_R16_USCALED:
		return "VK_FORMAT_R16_USCALED";
	case VK_FORMAT_R16_SSCALED:
		return "VK_FORMAT_R16_SSCALED";
	case VK_FORMAT_R16_UINT:
		return "VK_FORMAT_R16_UINT";
	case VK_FORMAT_R16_SINT:
		return "VK_FORMAT_R16_SINT";
	case VK_FORMAT_R16_SFLOAT:
		return "VK_FORMAT_R16_SFLOAT";
	case VK_FORMAT_R16G16_UNORM:
		return "VK_FORMAT_R16G16_UNORM";
	case VK_FORMAT_R16G16_SNORM:
		return "VK_FORMAT_R16G16_SNORM";
	case VK_FORMAT_R16G16_USCALED:
		return "VK_FORMAT_R16G16_USCALED";
	case VK_FORMAT_R16G16_SSCALED:
		return "VK_FORMAT_R16G16_SSCALED";
	case VK_FORMAT_R16G16_UINT:
		return "VK_FORMAT_R16G16_UINT";
	case VK_FORMAT_R16G16_SINT:
		return "VK_FORMAT_R16G16_SINT";
	case VK_FORMAT_R16G16_SFLOAT:
		return "VK_FORMAT_R16G16_SFLOAT";
	case VK_FORMAT_R16G16B16_UNORM:
		return "VK_FORMAT_R16G16B16_UNORM";
	case VK_FORMAT_R16G16B16_SNORM:
		return "VK_FORMAT_R16G16B16_SNORM";
	case VK_FORMAT_R16G16B16_USCALED:
		return "VK_FORMAT_R16G16B16_USCALED";
	case VK_FORMAT_R16G16B16_SSCALED:
		return "VK_FORMAT_R16G16B16_SSCALED";
	case VK_FORMAT_R16G16B16_UINT:
		return "VK_FORMAT_R16G16B16_UINT";
	case VK_FORMAT_R16G16B16_SINT:
		return "VK_FORMAT_R16G16B16_SINT";
	case VK_FORMAT_R16G16B16_SFLOAT:
		return "VK_FORMAT_R16G16B16_SFLOAT";
	case VK_FORMAT_R16G16B16A16_UNORM:
		return "VK_FORMAT_R16G16B16A16_UNORM";
	case VK_FORMAT_R16G16B16A16_SNORM:
		return "VK_FORMAT_R16G16B16A16_SNORM";
	case VK_FORMAT_R16G16B16A16_USCALED:
		return "VK_FORMAT_R16G16B16A16_USCALED";
	case VK_FORMAT_R16G16B16A16_SSCALED:
		return "VK_FORMAT_R16G16B16A16_SSCALED";
	case VK_FORMAT_R16G16B16A16_UINT:
		return "VK_FORMAT_R16G16B16A16_UINT";
	case VK_FORMAT_R16G16B16A16_SINT:
		return "VK_FORMAT_R16G16B16A16_SINT";
	case VK_FORMAT_R16G16B16A16_SFLOAT:
		return "VK_FORMAT_R16G16B16A16_SFLOAT";
	case VK_FORMAT_R32_UINT:
		return "VK_FORMAT_R32_UINT";
	case VK_FORMAT_R32_SINT:
		return "VK_FORMAT_R32_SINT";
	case VK_FORMAT_R32_SFLOAT:
		return "VK_FORMAT_R32_SFLOAT";
	case VK_FORMAT_R32G32_UINT:
		return "VK_FORMAT_R32G32_UINT";
	case VK_FORMAT_R32G32_SINT:
		return "VK_FORMAT_R32G32_SINT";
	case VK_FORMAT_R32G32_SFLOAT:
		return "VK_FORMAT_R32G32_SFLOAT";
	case VK_FORMAT_R32G32B32_UINT:
		return "VK_FORMAT_R32G32B32_UINT";
	case VK_FORMAT_R32G32B32_SINT:
		return "VK_FORMAT_R32G32B32_SINT";
	case VK_FORMAT_R32G32B32_SFLOAT:
		return "VK_FORMAT_R32G32B32_SFLOAT";
	case VK_FORMAT_R32G32B32A32_UINT:
		return "VK_FORMAT_R32G32B32A32_UINT";
	case VK_FORMAT_R32G32B32A32_SINT:
		return "VK_FORMAT_R32G32B32A32_SINT";
	case VK_FORMAT_R32G32B32A32_SFLOAT:
		return "VK_FORMAT_R32G32B32A32_SFLOAT";
	case VK_FORMAT_R64_UINT:
		return "VK_FORMAT_R64_UINT";
	case VK_FORMAT_R64_SINT:
		return "VK_FORMAT_R64_SINT";
	case VK_FORMAT_R64_SFLOAT:
		return "VK_FORMAT_R64_SFLOAT";
	case VK_FORMAT_R64G64_UINT:
		return "VK_FORMAT_R64G64_UINT";
	case VK_FORMAT_R64G64_SINT:
		return "VK_FORMAT_R64G64_SINT";
	case VK_FORMAT_R64G64_SFLOAT:
		return "VK_FORMAT_R64G64_SFLOAT";
	case VK_FORMAT_R64G64B64_UINT:
		return "VK_FORMAT_R64G64B64_UINT";
	case VK_FORMAT_R64G64B64_SINT:
		return "VK_FORMAT_R64G64B64_SINT";
	case VK_FORMAT_R64G64B64_SFLOAT:
		return "VK_FORMAT_R64G64B64_SFLOAT";
	case VK_FORMAT_R64G64B64A64_UINT:
		return "VK_FORMAT_R64G64B64A64_UINT";
	case VK_FORMAT_R64G64B64A64_SINT:
		return "VK_FORMAT_R64G64B64A64_SINT";
	case VK_FORMAT_R64G64B64A64_SFLOAT:
		return "VK_FORMAT_R64G64B64A64_SFLOAT";
	case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
		return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
	case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
		return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
	case VK_FORMAT_D16_UNORM:
		return "VK_FORMAT_D16_UNORM";
	case VK_FORMAT_X8_D24_UNORM_PACK32:
		return "VK_FORMAT_X8_D24_UNORM_PACK32";
	case VK_FORMAT_D32_SFLOAT:
		return "VK_FORMAT_D32_SFLOAT";
	case VK_FORMAT_S8_UINT:
		return "VK_FORMAT_S8_UINT";
	case VK_FORMAT_D16_UNORM_S8_UINT:
		return "VK_FORMAT_D16_UNORM_S8_UINT";
	case VK_FORMAT_D24_UNORM_S8_UINT:
		return "VK_FORMAT_D24_UNORM_S8_UINT";
	case VK_FORMAT_D32_SFLOAT_S8_UINT:
		return "VK_FORMAT_D32_SFLOAT_S8_UINT";
	case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
		return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
	case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
		return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
	case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
		return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
	case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
		return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
	case VK_FORMAT_BC2_UNORM_BLOCK:
		return "VK_FORMAT_BC2_UNORM_BLOCK";
	case VK_FORMAT_BC2_SRGB_BLOCK:
		return "VK_FORMAT_BC2_SRGB_BLOCK";
	case VK_FORMAT_BC3_UNORM_BLOCK:
		return "VK_FORMAT_BC3_UNORM_BLOCK";
	case VK_FORMAT_BC3_SRGB_BLOCK:
		return "VK_FORMAT_BC3_SRGB_BLOCK";
	case VK_FORMAT_BC4_UNORM_BLOCK:
		return "VK_FORMAT_BC4_UNORM_BLOCK";
	case VK_FORMAT_BC4_SNORM_BLOCK:
		return "VK_FORMAT_BC4_SNORM_BLOCK";
	case VK_FORMAT_BC5_UNORM_BLOCK:
		return "VK_FORMAT_BC5_UNORM_BLOCK";
	case VK_FORMAT_BC5_SNORM_BLOCK:
		return "VK_FORMAT_BC5_SNORM_BLOCK";
	case VK_FORMAT_BC6H_UFLOAT_BLOCK:
		return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
	case VK_FORMAT_BC6H_SFLOAT_BLOCK:
		return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
	case VK_FORMAT_BC7_UNORM_BLOCK:
		return "VK_FORMAT_BC7_UNORM_BLOCK";
	case VK_FORMAT_BC7_SRGB_BLOCK:
		return "VK_FORMAT_BC7_SRGB_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
	case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
	case VK_FORMAT_EAC_R11_UNORM_BLOCK:
		return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
	case VK_FORMAT_EAC_R11_SNORM_BLOCK:
		return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
	case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
		return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
	case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
		return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
	case VK_FORMAT_G8B8G8R8_422_UNORM:
		return "VK_FORMAT_G8B8G8R8_422_UNORM";
	case VK_FORMAT_B8G8R8G8_422_UNORM:
		return "VK_FORMAT_B8G8R8G8_422_UNORM";
	case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM:
		return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM";
	case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM:
		return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM";
	case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM:
		return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM";
	case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM:
		return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM";
	case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM:
		return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM";
	case VK_FORMAT_R10X6_UNORM_PACK16:
		return "VK_FORMAT_R10X6_UNORM_PACK16";
	case VK_FORMAT_R10X6G10X6_UNORM_2PACK16:
		return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16";
	case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:
		return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16";
	case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
		return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16";
	case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
		return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16";
	case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16:
		return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16";
	case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:
		return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16";
	case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16:
		return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16";
	case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:
		return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16";
	case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16:
		return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16";
	case VK_FORMAT_R12X4_UNORM_PACK16:
		return "VK_FORMAT_R12X4_UNORM_PACK16";
	case VK_FORMAT_R12X4G12X4_UNORM_2PACK16:
		return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16";
	case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:
		return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16";
	case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
		return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16";
	case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
		return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16";
	case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16:
		return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16";
	case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:
		return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16";
	case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16:
		return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16";
	case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:
		return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16";
	case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16:
		return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16";
	case VK_FORMAT_G16B16G16R16_422_UNORM:
		return "VK_FORMAT_G16B16G16R16_422_UNORM";
	case VK_FORMAT_B16G16R16G16_422_UNORM:
		return "VK_FORMAT_B16G16R16G16_422_UNORM";
	case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM:
		return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM";
	case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM:
		return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM";
	case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM:
		return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM";
	case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM:
		return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM";
	case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM:
		return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM";
	case VK_FORMAT_G8_B8R8_2PLANE_444_UNORM:
		return "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM";
	case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16:
		return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16";
	case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16:
		return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16";
	case VK_FORMAT_G16_B16R16_2PLANE_444_UNORM:
		return "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM";
	case VK_FORMAT_A4R4G4B4_UNORM_PACK16:
		return "VK_FORMAT_A4R4G4B4_UNORM_PACK16";
	case VK_FORMAT_A4B4G4R4_UNORM_PACK16:
		return "VK_FORMAT_A4B4G4R4_UNORM_PACK16";
	case VK_FORMAT_A1B5G5R5_UNORM_PACK16:
		return "VK_FORMAT_A1B5G5R5_UNORM_PACK16";
	case VK_FORMAT_A8_UNORM:
		return "VK_FORMAT_A8_UNORM";
	case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG";
	case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
		return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG";
	case VK_FORMAT_R8_BOOL_ARM:
		return "VK_FORMAT_R8_BOOL_ARM";
	case VK_FORMAT_R16G16_SFIXED5_NV:
		return "VK_FORMAT_R16G16_SFIXED5_NV";
	case VK_FORMAT_R10X6_UINT_PACK16_ARM:
		return "VK_FORMAT_R10X6_UINT_PACK16_ARM";
	case VK_FORMAT_R10X6G10X6_UINT_2PACK16_ARM:
		return "VK_FORMAT_R10X6G10X6_UINT_2PACK16_ARM";
	case VK_FORMAT_R10X6G10X6B10X6A10X6_UINT_4PACK16_ARM:
		return "VK_FORMAT_R10X6G10X6B10X6A10X6_UINT_4PACK16_ARM";
	case VK_FORMAT_R12X4_UINT_PACK16_ARM:
		return "VK_FORMAT_R12X4_UINT_PACK16_ARM";
	case VK_FORMAT_R12X4G12X4_UINT_2PACK16_ARM:
		return "VK_FORMAT_R12X4G12X4_UINT_2PACK16_ARM";
	case VK_FORMAT_R12X4G12X4B12X4A12X4_UINT_4PACK16_ARM:
		return "VK_FORMAT_R12X4G12X4B12X4A12X4_UINT_4PACK16_ARM";
	case VK_FORMAT_R14X2_UINT_PACK16_ARM:
		return "VK_FORMAT_R14X2_UINT_PACK16_ARM";
	case VK_FORMAT_R14X2G14X2_UINT_2PACK16_ARM:
		return "VK_FORMAT_R14X2G14X2_UINT_2PACK16_ARM";
	case VK_FORMAT_R14X2G14X2B14X2A14X2_UINT_4PACK16_ARM:
		return "VK_FORMAT_R14X2G14X2B14X2A14X2_UINT_4PACK16_ARM";
	case VK_FORMAT_R14X2_UNORM_PACK16_ARM:
		return "VK_FORMAT_R14X2_UNORM_PACK16_ARM";
	case VK_FORMAT_R14X2G14X2_UNORM_2PACK16_ARM:
		return "VK_FORMAT_R14X2G14X2_UNORM_2PACK16_ARM";
	case VK_FORMAT_R14X2G14X2B14X2A14X2_UNORM_4PACK16_ARM:
		return "VK_FORMAT_R14X2G14X2B14X2A14X2_UNORM_4PACK16_ARM";
	case VK_FORMAT_G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM:
		return "VK_FORMAT_G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM";
	case VK_FORMAT_G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM:
		return "VK_FORMAT_G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM";
	case VK_FORMAT_MAX_ENUM:
		return "VK_FORMAT_MAX_ENUM";
	default:
		return "UNKNOWN_FORMAT";
	}
}

static inline const char* vkColorSpaceToString(VkColorSpaceKHR cs)
{
	switch (cs)
	{

	case VK_COLOR_SPACE_SRGB_NONLINEAR_KHR:
		return "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR";
	case VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT:
		return "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT";
	case VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT:
		return "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT";
	case VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT:
		return "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT";
	case VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT:
		return "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT";
	case VK_COLOR_SPACE_BT709_LINEAR_EXT:
		return "VK_COLOR_SPACE_BT709_LINEAR_EXT";
	case VK_COLOR_SPACE_BT709_NONLINEAR_EXT:
		return "VK_COLOR_SPACE_BT709_NONLINEAR_EXT";
	case VK_COLOR_SPACE_BT2020_LINEAR_EXT:
		return "VK_COLOR_SPACE_BT2020_LINEAR_EXT";
	case VK_COLOR_SPACE_HDR10_ST2084_EXT:
		return "VK_COLOR_SPACE_HDR10_ST2084_EXT";
	case VK_COLOR_SPACE_DOLBYVISION_EXT:
		return "VK_COLOR_SPACE_DOLBYVISION_EXT";
	case VK_COLOR_SPACE_HDR10_HLG_EXT:
		return "VK_COLOR_SPACE_HDR10_HLG_EXT";
	case VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT:
		return "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT";
	case VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT:
		return "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT";
	case VK_COLOR_SPACE_PASS_THROUGH_EXT:
		return "VK_COLOR_SPACE_PASS_THROUGH_EXT";
	case VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT:
		return "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT";
	case VK_COLOR_SPACE_DISPLAY_NATIVE_AMD:
		return "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD";
	case VK_COLOR_SPACE_MAX_ENUM_KHR:
		return "VK_COLOR_SPACE_MAX_ENUM_KHR";
	default:
		return "UNKNOWN_FORMAT";
	}
}
